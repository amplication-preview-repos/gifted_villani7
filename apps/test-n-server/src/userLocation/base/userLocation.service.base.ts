/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserLocation as PrismaUserLocation,
  User as PrismaUser,
} from "@prisma/client";

export class UserLocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserLocationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userLocation.count(args);
  }

  async userLocations(
    args: Prisma.UserLocationFindManyArgs
  ): Promise<PrismaUserLocation[]> {
    return this.prisma.userLocation.findMany(args);
  }
  async userLocation(
    args: Prisma.UserLocationFindUniqueArgs
  ): Promise<PrismaUserLocation | null> {
    return this.prisma.userLocation.findUnique(args);
  }
  async createUserLocation(
    args: Prisma.UserLocationCreateArgs
  ): Promise<PrismaUserLocation> {
    return this.prisma.userLocation.create(args);
  }
  async updateUserLocation(
    args: Prisma.UserLocationUpdateArgs
  ): Promise<PrismaUserLocation> {
    return this.prisma.userLocation.update(args);
  }
  async deleteUserLocation(
    args: Prisma.UserLocationDeleteArgs
  ): Promise<PrismaUserLocation> {
    return this.prisma.userLocation.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userLocation
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
