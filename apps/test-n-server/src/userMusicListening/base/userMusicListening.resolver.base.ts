/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserMusicListening } from "./UserMusicListening";
import { UserMusicListeningCountArgs } from "./UserMusicListeningCountArgs";
import { UserMusicListeningFindManyArgs } from "./UserMusicListeningFindManyArgs";
import { UserMusicListeningFindUniqueArgs } from "./UserMusicListeningFindUniqueArgs";
import { CreateUserMusicListeningArgs } from "./CreateUserMusicListeningArgs";
import { UpdateUserMusicListeningArgs } from "./UpdateUserMusicListeningArgs";
import { DeleteUserMusicListeningArgs } from "./DeleteUserMusicListeningArgs";
import { User } from "../../user/base/User";
import { MusicTrack } from "../../musicTrack/base/MusicTrack";
import { UserMusicListeningService } from "../userMusicListening.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserMusicListening)
export class UserMusicListeningResolverBase {
  constructor(
    protected readonly service: UserMusicListeningService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserMusicListening",
    action: "read",
    possession: "any",
  })
  async _userMusicListeningsMeta(
    @graphql.Args() args: UserMusicListeningCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserMusicListening])
  @nestAccessControl.UseRoles({
    resource: "UserMusicListening",
    action: "read",
    possession: "any",
  })
  async userMusicListenings(
    @graphql.Args() args: UserMusicListeningFindManyArgs
  ): Promise<UserMusicListening[]> {
    return this.service.userMusicListenings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserMusicListening, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserMusicListening",
    action: "read",
    possession: "own",
  })
  async userMusicListening(
    @graphql.Args() args: UserMusicListeningFindUniqueArgs
  ): Promise<UserMusicListening | null> {
    const result = await this.service.userMusicListening(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserMusicListening)
  @nestAccessControl.UseRoles({
    resource: "UserMusicListening",
    action: "create",
    possession: "any",
  })
  async createUserMusicListening(
    @graphql.Args() args: CreateUserMusicListeningArgs
  ): Promise<UserMusicListening> {
    return await this.service.createUserMusicListening({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        musicTrack: args.data.musicTrack
          ? {
              connect: args.data.musicTrack,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserMusicListening)
  @nestAccessControl.UseRoles({
    resource: "UserMusicListening",
    action: "update",
    possession: "any",
  })
  async updateUserMusicListening(
    @graphql.Args() args: UpdateUserMusicListeningArgs
  ): Promise<UserMusicListening | null> {
    try {
      return await this.service.updateUserMusicListening({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          musicTrack: args.data.musicTrack
            ? {
                connect: args.data.musicTrack,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserMusicListening)
  @nestAccessControl.UseRoles({
    resource: "UserMusicListening",
    action: "delete",
    possession: "any",
  })
  async deleteUserMusicListening(
    @graphql.Args() args: DeleteUserMusicListeningArgs
  ): Promise<UserMusicListening | null> {
    try {
      return await this.service.deleteUserMusicListening(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: UserMusicListening
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MusicTrack, {
    nullable: true,
    name: "musicTrack",
  })
  @nestAccessControl.UseRoles({
    resource: "MusicTrack",
    action: "read",
    possession: "any",
  })
  async getMusicTrack(
    @graphql.Parent() parent: UserMusicListening
  ): Promise<MusicTrack | null> {
    const result = await this.service.getMusicTrack(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
