/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserMusicListening as PrismaUserMusicListening,
  User as PrismaUser,
  MusicTrack as PrismaMusicTrack,
} from "@prisma/client";

export class UserMusicListeningServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserMusicListeningCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userMusicListening.count(args);
  }

  async userMusicListenings(
    args: Prisma.UserMusicListeningFindManyArgs
  ): Promise<PrismaUserMusicListening[]> {
    return this.prisma.userMusicListening.findMany(args);
  }
  async userMusicListening(
    args: Prisma.UserMusicListeningFindUniqueArgs
  ): Promise<PrismaUserMusicListening | null> {
    return this.prisma.userMusicListening.findUnique(args);
  }
  async createUserMusicListening(
    args: Prisma.UserMusicListeningCreateArgs
  ): Promise<PrismaUserMusicListening> {
    return this.prisma.userMusicListening.create(args);
  }
  async updateUserMusicListening(
    args: Prisma.UserMusicListeningUpdateArgs
  ): Promise<PrismaUserMusicListening> {
    return this.prisma.userMusicListening.update(args);
  }
  async deleteUserMusicListening(
    args: Prisma.UserMusicListeningDeleteArgs
  ): Promise<PrismaUserMusicListening> {
    return this.prisma.userMusicListening.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userMusicListening
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getMusicTrack(parentId: string): Promise<PrismaMusicTrack | null> {
    return this.prisma.userMusicListening
      .findUnique({
        where: { id: parentId },
      })
      .musicTrack();
  }
}
